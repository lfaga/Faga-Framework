//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2300
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.2300.
// 

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Net;
using System.Web.Services;
using System.Web.Services.Description;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

namespace Faga.Framework.ReportingServices.ReportService
{
  [DebuggerStepThrough]
  [DesignerCategory("code")]
  [
    WebServiceBinding(Name = "ReportingServiceSoap",
      Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  [XmlInclude(typeof (DataSourceDefinitionOrReference))]
  [XmlInclude(typeof (ExpirationDefinition))]
  [XmlInclude(typeof (RecurrencePattern))]
  [XmlInclude(typeof (ScheduleDefinitionOrReference))]
  public class ReportingService : SoapHttpClientProtocol
  {
    public BatchHeader BatchHeaderValue;

    public ItemNamespaceHeader ItemNamespaceHeaderValue;
    public ServerInfoHeader ServerInfoHeaderValue;

    public SessionHeader SessionHeaderValue;


    public ReportingService()
      : this("http://localhost/ReportServer/ReportService.asmx")
    {
    }


    public ReportingService(string url)
    {
      Url = url;
      Credentials = CredentialCache.DefaultCredentials;
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [
      SoapDocumentMethod(
        "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSecureMethods",
        RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
        ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
        Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public string[] ListSecureMethods()
    {
      var results = Invoke("ListSecureMethods", new object[0]);
      return (string[]) results[0];
    }


    public IAsyncResult BeginListSecureMethods(AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("ListSecureMethods", new object[0], callback, asyncState);
    }


    public string[] EndListSecureMethods(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (string[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
                        "Batch",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlElement("BatchID")]
    public string CreateBatch()
    {
      var results = Invoke("CreateBatch", new object[0]);
      return (string) results[0];
    }


    public IAsyncResult BeginCreateBatch(AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("CreateBatch", new object[0], callback, asyncState);
    }


    public string EndCreateBatch(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (string) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Cancel" +
                        "Batch",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void CancelBatch()
    {
      Invoke("CancelBatch", new object[0]);
    }


    public IAsyncResult BeginCancelBatch(AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("CancelBatch", new object[0], callback, asyncState);
    }


    public void EndCancelBatch(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Execut" +
                        "eBatch",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void ExecuteBatch()
    {
      Invoke("ExecuteBatch", new object[0]);
    }


    public IAsyncResult BeginExecuteBatch(AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("ExecuteBatch", new object[0], callback, asyncState);
    }


    public void EndExecuteBatch(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetSys" +
                        "temProperties",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("Values")]
    public Property[] GetSystemProperties(Property[] Properties)
    {
      var results = Invoke("GetSystemProperties", new object[]
      {
        Properties
      });
      return (Property[]) results[0];
    }


    public IAsyncResult BeginGetSystemProperties(Property[] Properties, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("GetSystemProperties", new object[]
      {
        Properties
      }, callback, asyncState);
    }


    public Property[] EndGetSystemProperties(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (Property[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetSys" +
                        "temProperties",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void SetSystemProperties(Property[] Properties)
    {
      Invoke("SetSystemProperties", new object[]
      {
        Properties
      });
    }


    public IAsyncResult BeginSetSystemProperties(Property[] Properties, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("SetSystemProperties", new object[]
      {
        Properties
      }, callback, asyncState);
    }


    public void EndSetSystemProperties(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Delete" +
                        "Item",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void DeleteItem(string Item)
    {
      Invoke("DeleteItem", new object[]
      {
        Item
      });
    }


    public IAsyncResult BeginDeleteItem(string Item, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("DeleteItem", new object[]
      {
        Item
      }, callback, asyncState);
    }


    public void EndDeleteItem(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/MoveIt" +
                        "em",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void MoveItem(string Item, string Target)
    {
      Invoke("MoveItem", new object[]
      {
        Item,
        Target
      });
    }


    public IAsyncResult BeginMoveItem(string Item, string Target, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("MoveItem", new object[]
      {
        Item,
        Target
      }, callback, asyncState);
    }


    public void EndMoveItem(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListCh" +
                        "ildren",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("CatalogItems")]
    public CatalogItem[] ListChildren(string Item, bool Recursive)
    {
      var results = Invoke("ListChildren", new object[]
      {
        Item,
        Recursive
      });
      return (CatalogItem[]) results[0];
    }


    public IAsyncResult BeginListChildren(string Item, bool Recursive, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("ListChildren", new object[]
      {
        Item,
        Recursive
      }, callback, asyncState);
    }


    public CatalogItem[] EndListChildren(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (CatalogItem[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("ItemNamespaceHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetPro" +
                        "perties",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("Values")]
    public Property[] GetProperties(string Item, Property[] Properties)
    {
      var results = Invoke("GetProperties", new object[]
      {
        Item,
        Properties
      });
      return (Property[]) results[0];
    }


    public IAsyncResult BeginGetProperties(string Item, Property[] Properties, AsyncCallback callback,
      object asyncState)
    {
      return BeginInvoke("GetProperties", new object[]
      {
        Item,
        Properties
      }, callback, asyncState);
    }


    public Property[] EndGetProperties(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (Property[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetPro" +
                        "perties",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void SetProperties(string Item, Property[] Properties)
    {
      Invoke("SetProperties", new object[]
      {
        Item,
        Properties
      });
    }


    public IAsyncResult BeginSetProperties(string Item, Property[] Properties, AsyncCallback callback,
      object asyncState)
    {
      return BeginInvoke("SetProperties", new object[]
      {
        Item,
        Properties
      }, callback, asyncState);
    }


    public void EndSetProperties(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetIte" +
                        "mType",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlElement("Type")]
    public ItemTypeEnum GetItemType(string Item)
    {
      var results = Invoke("GetItemType", new object[]
      {
        Item
      });
      return (ItemTypeEnum) results[0];
    }


    public IAsyncResult BeginGetItemType(string Item, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("GetItemType", new object[]
      {
        Item
      }, callback, asyncState);
    }


    public ItemTypeEnum EndGetItemType(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (ItemTypeEnum) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
                        "Folder",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void CreateFolder(string Folder, string Parent, Property[] Properties)
    {
      Invoke("CreateFolder", new object[]
      {
        Folder,
        Parent,
        Properties
      });
    }


    public IAsyncResult BeginCreateFolder(string Folder, string Parent, Property[] Properties,
      AsyncCallback callback,
      object asyncState)
    {
      return BeginInvoke("CreateFolder", new object[]
      {
        Folder,
        Parent,
        Properties
      }, callback, asyncState);
    }


    public void EndCreateFolder(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
                        "Report",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("Warnings")]
    public Warning[] CreateReport(string Report, string Parent, bool Overwrite,
      [XmlElement(DataType = "base64Binary")] byte[] Definition, Property[] Properties)
    {
      var results = Invoke("CreateReport", new object[]
      {
        Report,
        Parent,
        Overwrite,
        Definition,
        Properties
      });
      return (Warning[]) results[0];
    }


    public IAsyncResult BeginCreateReport(string Report, string Parent, bool Overwrite, byte[] Definition,
      Property[] Properties, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("CreateReport", new object[]
      {
        Report,
        Parent,
        Overwrite,
        Definition,
        Properties
      }, callback, asyncState);
    }


    public Warning[] EndCreateReport(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (Warning[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRep" +
                        "ortDefinition",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlElement("Definition", DataType = "base64Binary")]
    public byte[] GetReportDefinition(string Report)
    {
      var results = Invoke("GetReportDefinition", new object[]
      {
        Report
      });
      return (byte[]) results[0];
    }


    public IAsyncResult BeginGetReportDefinition(string Report, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("GetReportDefinition", new object[]
      {
        Report
      }, callback, asyncState);
    }


    public byte[] EndGetReportDefinition(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (byte[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRep" +
                        "ortDefinition",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("Warnings")]
    public Warning[] SetReportDefinition(string Report, [XmlElement(DataType = "base64Binary")] byte[] Definition)
    {
      var results = Invoke("SetReportDefinition", new object[]
      {
        Report,
        Definition
      });
      return (Warning[]) results[0];
    }


    public IAsyncResult BeginSetReportDefinition(string Report, byte[] Definition, AsyncCallback callback,
      object asyncState)
    {
      return BeginInvoke("SetReportDefinition", new object[]
      {
        Report,
        Definition
      }, callback, asyncState);
    }


    public Warning[] EndSetReportDefinition(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (Warning[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
                        "Resource",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void CreateResource(string Resource, string Parent, bool Overwrite,
      [XmlElement(DataType = "base64Binary")] byte[] Contents, string MimeType,
      Property[] Properties)
    {
      Invoke("CreateResource", new object[]
      {
        Resource,
        Parent,
        Overwrite,
        Contents,
        MimeType,
        Properties
      });
    }


    public IAsyncResult BeginCreateResource(string Resource, string Parent, bool Overwrite, byte[] Contents,
      string MimeType, Property[] Properties, AsyncCallback callback,
      object asyncState)
    {
      return BeginInvoke("CreateResource", new object[]
      {
        Resource,
        Parent,
        Overwrite,
        Contents,
        MimeType,
        Properties
      }, callback, asyncState);
    }


    public void EndCreateResource(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRes" +
                        "ourceContents",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void SetResourceContents(string Resource, [XmlElement(DataType = "base64Binary")] byte[] Contents,
      string MimeType)
    {
      Invoke("SetResourceContents", new object[]
      {
        Resource,
        Contents,
        MimeType
      });
    }


    public IAsyncResult BeginSetResourceContents(string Resource, byte[] Contents, string MimeType,
      AsyncCallback callback,
      object asyncState)
    {
      return BeginInvoke("SetResourceContents", new object[]
      {
        Resource,
        Contents,
        MimeType
      }, callback, asyncState);
    }


    public void EndSetResourceContents(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRes" +
                        "ourceContents",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlElement("Contents", DataType = "base64Binary")]
    public byte[] GetResourceContents(string Resource, out string MimeType)
    {
      var results = Invoke("GetResourceContents", new object[]
      {
        Resource
      });
      MimeType = (string) results[1];
      return (byte[]) results[0];
    }


    public IAsyncResult BeginGetResourceContents(string Resource, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("GetResourceContents", new object[]
      {
        Resource
      }, callback, asyncState);
    }


    public byte[] EndGetResourceContents(IAsyncResult asyncResult, out string MimeType)
    {
      var results = EndInvoke(asyncResult);
      MimeType = (string) results[1];
      return (byte[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRep" +
                        "ortParameters",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("Parameters")]
    public ReportParameter[] GetReportParameters(string Report, string HistoryID, bool ForRendering,
      ParameterValue[] Values, DataSourceCredentials[] _Credentials)
    {
      var results = Invoke("GetReportParameters", new object[]
      {
        Report,
        HistoryID,
        ForRendering,
        Values,
        _Credentials
      });
      return (ReportParameter[]) results[0];
    }


    public IAsyncResult BeginGetReportParameters(string Report, string HistoryID, bool ForRendering,
      ParameterValue[] Values, DataSourceCredentials[] _Credentials,
      AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("GetReportParameters", new object[]
      {
        Report,
        HistoryID,
        ForRendering,
        Values,
        _Credentials
      }, callback, asyncState);
    }


    public ReportParameter[] EndGetReportParameters(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (ReportParameter[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRep" +
                        "ortParameters",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void SetReportParameters(string Report, ReportParameter[] Parameters)
    {
      Invoke("SetReportParameters", new object[]
      {
        Report,
        Parameters
      });
    }


    public IAsyncResult BeginSetReportParameters(string Report, ReportParameter[] Parameters, AsyncCallback callback,
      object asyncState)
    {
      return BeginInvoke("SetReportParameters", new object[]
      {
        Report,
        Parameters
      }, callback, asyncState);
    }


    public void EndSetReportParameters(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
                        "LinkedReport",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void CreateLinkedReport(string Report, string Parent, string Link, Property[] Properties)
    {
      Invoke("CreateLinkedReport", new object[]
      {
        Report,
        Parent,
        Link,
        Properties
      });
    }


    public IAsyncResult BeginCreateLinkedReport(string Report, string Parent, string Link, Property[] Properties,
      AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("CreateLinkedReport", new object[]
      {
        Report,
        Parent,
        Link,
        Properties
      }, callback, asyncState);
    }


    public void EndCreateLinkedReport(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRep" +
                        "ortLink",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlElement("Link")]
    public string GetReportLink(string Report)
    {
      var results = Invoke("GetReportLink", new object[]
      {
        Report
      });
      return (string) results[0];
    }


    public IAsyncResult BeginGetReportLink(string Report, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("GetReportLink", new object[]
      {
        Report
      }, callback, asyncState);
    }


    public string EndGetReportLink(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (string) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRep" +
                        "ortLink",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void SetReportLink(string Report, string Link)
    {
      Invoke("SetReportLink", new object[]
      {
        Report,
        Link
      });
    }


    public IAsyncResult BeginSetReportLink(string Report, string Link, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("SetReportLink", new object[]
      {
        Report,
        Link
      }, callback, asyncState);
    }


    public void EndSetReportLink(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListLi" +
                        "nkedReports",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("Reports")]
    public CatalogItem[] ListLinkedReports(string Report)
    {
      var results = Invoke("ListLinkedReports", new object[]
      {
        Report
      });
      return (CatalogItem[]) results[0];
    }


    public IAsyncResult BeginListLinkedReports(string Report, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("ListLinkedReports", new object[]
      {
        Report
      }, callback, asyncState);
    }


    public CatalogItem[] EndListLinkedReports(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (CatalogItem[]) results[0];
    }


    [SoapHeader("SessionHeaderValue", Direction = SoapHeaderDirection.InOut)]
    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Render" +
                        "",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlElement("Result", DataType = "base64Binary")]
    public byte[] Render(string Report, string Format, string HistoryID, string DeviceInfo,
      ParameterValue[] Parameters,
      DataSourceCredentials[] _Credentials, string ShowHideToggle, out string Encoding,
      out string MimeType, out ParameterValue[] ParametersUsed, out Warning[] Warnings,
      out string[] StreamIds)
    {
      var results = Invoke("Render", new object[]
      {
        Report,
        Format,
        HistoryID,
        DeviceInfo,
        Parameters,
        _Credentials,
        ShowHideToggle
      });
      Encoding = (string) results[1];
      MimeType = (string) results[2];
      ParametersUsed = (ParameterValue[]) results[3];
      Warnings = (Warning[]) results[4];
      StreamIds = (string[]) results[5];
      return (byte[]) results[0];
    }


    public IAsyncResult BeginRender(string Report, string Format, string HistoryID, string DeviceInfo,
      ParameterValue[] Parameters, DataSourceCredentials[] _Credentials,
      string ShowHideToggle, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("Render", new object[]
      {
        Report,
        Format,
        HistoryID,
        DeviceInfo,
        Parameters,
        _Credentials,
        ShowHideToggle
      }, callback, asyncState);
    }


    public byte[] EndRender(IAsyncResult asyncResult, out string Encoding, out string MimeType,
      out ParameterValue[] ParametersUsed, out Warning[] Warnings, out string[] StreamIds)
    {
      var results = EndInvoke(asyncResult);
      Encoding = (string) results[1];
      MimeType = (string) results[2];
      ParametersUsed = (ParameterValue[]) results[3];
      Warnings = (Warning[]) results[4];
      StreamIds = (string[]) results[5];
      return (byte[]) results[0];
    }


    [SoapHeader("SessionHeaderValue", Direction = SoapHeaderDirection.InOut)]
    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Render" +
                        "Stream",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlElement("Result", DataType = "base64Binary")]
    public byte[] RenderStream(string Report, string Format, string StreamID, string HistoryID, string DeviceInfo,
      ParameterValue[] Parameters, out string Encoding, out string MimeType)
    {
      var results = Invoke("RenderStream", new object[]
      {
        Report,
        Format,
        StreamID,
        HistoryID,
        DeviceInfo,
        Parameters
      });
      Encoding = (string) results[1];
      MimeType = (string) results[2];
      return (byte[]) results[0];
    }


    public IAsyncResult BeginRenderStream(string Report, string Format, string StreamID, string HistoryID,
      string DeviceInfo, ParameterValue[] Parameters, AsyncCallback callback,
      object asyncState)
    {
      return BeginInvoke("RenderStream", new object[]
      {
        Report,
        Format,
        StreamID,
        HistoryID,
        DeviceInfo,
        Parameters
      }, callback, asyncState);
    }


    public byte[] EndRenderStream(IAsyncResult asyncResult, out string Encoding, out string MimeType)
    {
      var results = EndInvoke(asyncResult);
      Encoding = (string) results[1];
      MimeType = (string) results[2];
      return (byte[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRen" +
                        "derResource",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlElement("Result", DataType = "base64Binary")]
    public byte[] GetRenderResource(string Format, string DeviceInfo, out string MimeType)
    {
      var results = Invoke("GetRenderResource", new object[]
      {
        Format,
        DeviceInfo
      });
      MimeType = (string) results[1];
      return (byte[]) results[0];
    }


    public IAsyncResult BeginGetRenderResource(string Format, string DeviceInfo, AsyncCallback callback,
      object asyncState)
    {
      return BeginInvoke("GetRenderResource", new object[]
      {
        Format,
        DeviceInfo
      }, callback, asyncState);
    }


    public byte[] EndGetRenderResource(IAsyncResult asyncResult, out string MimeType)
    {
      var results = EndInvoke(asyncResult);
      MimeType = (string) results[1];
      return (byte[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetExe" +
                        "cutionOptions",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void SetExecutionOptions(string Report, ExecutionSettingEnum ExecutionSetting,
      [XmlElement("NoSchedule", typeof (NoSchedule))] [XmlElement("ScheduleDefinition", typeof (ScheduleDefinition))] [XmlElement("ScheduleReference", typeof (ScheduleReference))] ScheduleDefinitionOrReference Item)
    {
      Invoke("SetExecutionOptions", new object[]
      {
        Report,
        ExecutionSetting,
        Item
      });
    }


    public IAsyncResult BeginSetExecutionOptions(string Report, ExecutionSettingEnum ExecutionSetting,
      ScheduleDefinitionOrReference Item, AsyncCallback callback,
      object asyncState)
    {
      return BeginInvoke("SetExecutionOptions", new object[]
      {
        Report,
        ExecutionSetting,
        Item
      }, callback, asyncState);
    }


    public void EndSetExecutionOptions(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetExe" +
                        "cutionOptions",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlElement("ExecutionSetting")]
    public ExecutionSettingEnum GetExecutionOptions(string Report,
      [XmlElement("NoSchedule", typeof (NoSchedule))] [XmlElement("ScheduleDefinition", typeof (ScheduleDefinition))] [XmlElement("ScheduleReference", typeof (ScheduleReference))] out
        ScheduleDefinitionOrReference Item)
    {
      var results = Invoke("GetExecutionOptions", new object[]
      {
        Report
      });
      Item = (ScheduleDefinitionOrReference) results[1];
      return (ExecutionSettingEnum) results[0];
    }


    public IAsyncResult BeginGetExecutionOptions(string Report, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("GetExecutionOptions", new object[]
      {
        Report
      }, callback, asyncState);
    }


    public ExecutionSettingEnum EndGetExecutionOptions(IAsyncResult asyncResult,
      out ScheduleDefinitionOrReference Item)
    {
      var results = EndInvoke(asyncResult);
      Item = (ScheduleDefinitionOrReference) results[1];
      return (ExecutionSettingEnum) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetCac" +
                        "heOptions",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void SetCacheOptions(string Report, bool CacheReport,
      [XmlElement("ScheduleExpiration", typeof (ScheduleExpiration))] [XmlElement("TimeExpiration", typeof (TimeExpiration))] ExpirationDefinition Item)
    {
      Invoke("SetCacheOptions", new object[]
      {
        Report,
        CacheReport,
        Item
      });
    }


    public IAsyncResult BeginSetCacheOptions(string Report, bool CacheReport, ExpirationDefinition Item,
      AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("SetCacheOptions", new object[]
      {
        Report,
        CacheReport,
        Item
      }, callback, asyncState);
    }


    public void EndSetCacheOptions(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetCac" +
                        "heOptions",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlElement("CacheReport")]
    public bool GetCacheOptions(string Report,
      [XmlElement("ScheduleExpiration", typeof (ScheduleExpiration))] [XmlElement("TimeExpiration", typeof (TimeExpiration))] out ExpirationDefinition Item)
    {
      var results = Invoke("GetCacheOptions", new object[]
      {
        Report
      });
      Item = (ExpirationDefinition) results[1];
      return (bool) results[0];
    }


    public IAsyncResult BeginGetCacheOptions(string Report, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("GetCacheOptions", new object[]
      {
        Report
      }, callback, asyncState);
    }


    public bool EndGetCacheOptions(IAsyncResult asyncResult, out ExpirationDefinition Item)
    {
      var results = EndInvoke(asyncResult);
      Item = (ExpirationDefinition) results[1];
      return (bool) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Update" +
                        "ReportExecutionSnapshot",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void UpdateReportExecutionSnapshot(string Report)
    {
      Invoke("UpdateReportExecutionSnapshot", new object[]
      {
        Report
      });
    }


    public IAsyncResult BeginUpdateReportExecutionSnapshot(string Report, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("UpdateReportExecutionSnapshot", new object[]
      {
        Report
      }, callback, asyncState);
    }


    public void EndUpdateReportExecutionSnapshot(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/FlushC" +
                        "ache",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void FlushCache(string Report)
    {
      Invoke("FlushCache", new object[]
      {
        Report
      });
    }


    public IAsyncResult BeginFlushCache(string Report, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("FlushCache", new object[]
      {
        Report
      }, callback, asyncState);
    }


    public void EndFlushCache(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListJo" +
                        "bs",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("Jobs")]
    public Job[] ListJobs()
    {
      var results = Invoke("ListJobs", new object[0]);
      return (Job[]) results[0];
    }


    public IAsyncResult BeginListJobs(AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("ListJobs", new object[0], callback, asyncState);
    }


    public Job[] EndListJobs(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (Job[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Cancel" +
                        "Job",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public bool CancelJob(string JobID)
    {
      var results = Invoke("CancelJob", new object[]
      {
        JobID
      });
      return (bool) results[0];
    }


    public IAsyncResult BeginCancelJob(string JobID, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("CancelJob", new object[]
      {
        JobID
      }, callback, asyncState);
    }


    public bool EndCancelJob(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (bool) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
                        "DataSource",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void CreateDataSource(string DataSource, string Parent, bool Overwrite, DataSourceDefinition Definition,
      Property[] Properties)
    {
      Invoke("CreateDataSource", new object[]
      {
        DataSource,
        Parent,
        Overwrite,
        Definition,
        Properties
      });
    }


    public IAsyncResult BeginCreateDataSource(string DataSource, string Parent, bool Overwrite,
      DataSourceDefinition Definition, Property[] Properties,
      AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("CreateDataSource", new object[]
      {
        DataSource,
        Parent,
        Overwrite,
        Definition,
        Properties
      }, callback, asyncState);
    }


    public void EndCreateDataSource(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetDat" +
                        "aSourceContents",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlElement("Definition")]
    public DataSourceDefinition GetDataSourceContents(string DataSource)
    {
      var results = Invoke("GetDataSourceContents", new object[]
      {
        DataSource
      });
      return (DataSourceDefinition) results[0];
    }


    public IAsyncResult BeginGetDataSourceContents(string DataSource, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("GetDataSourceContents", new object[]
      {
        DataSource
      }, callback, asyncState);
    }


    public DataSourceDefinition EndGetDataSourceContents(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (DataSourceDefinition) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetDat" +
                        "aSourceContents",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void SetDataSourceContents(string DataSource, DataSourceDefinition Definition)
    {
      Invoke("SetDataSourceContents", new object[]
      {
        DataSource,
        Definition
      });
    }


    public IAsyncResult BeginSetDataSourceContents(string DataSource, DataSourceDefinition Definition,
      AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("SetDataSourceContents", new object[]
      {
        DataSource,
        Definition
      }, callback, asyncState);
    }


    public void EndSetDataSourceContents(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Enable" +
                        "DataSource",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void EnableDataSource(string DataSource)
    {
      Invoke("EnableDataSource", new object[]
      {
        DataSource
      });
    }


    public IAsyncResult BeginEnableDataSource(string DataSource, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("EnableDataSource", new object[]
      {
        DataSource
      }, callback, asyncState);
    }


    public void EndEnableDataSource(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Disabl" +
                        "eDataSource",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void DisableDataSource(string DataSource)
    {
      Invoke("DisableDataSource", new object[]
      {
        DataSource
      });
    }


    public IAsyncResult BeginDisableDataSource(string DataSource, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("DisableDataSource", new object[]
      {
        DataSource
      }, callback, asyncState);
    }


    public void EndDisableDataSource(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListRe" +
                        "portsUsingDataSource",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("Reports")]
    public CatalogItem[] ListReportsUsingDataSource(string DataSource)
    {
      var results = Invoke("ListReportsUsingDataSource", new object[]
      {
        DataSource
      });
      return (CatalogItem[]) results[0];
    }


    public IAsyncResult BeginListReportsUsingDataSource(string DataSource, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("ListReportsUsingDataSource", new object[]
      {
        DataSource
      }, callback, asyncState);
    }


    public CatalogItem[] EndListReportsUsingDataSource(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (CatalogItem[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRep" +
                        "ortDataSources",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void SetReportDataSources(string Report, DataSource[] DataSources)
    {
      Invoke("SetReportDataSources", new object[]
      {
        Report,
        DataSources
      });
    }


    public IAsyncResult BeginSetReportDataSources(string Report, DataSource[] DataSources, AsyncCallback callback,
      object asyncState)
    {
      return BeginInvoke("SetReportDataSources", new object[]
      {
        Report,
        DataSources
      }, callback, asyncState);
    }


    public void EndSetReportDataSources(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRep" +
                        "ortDataSources",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("DataSources")]
    public DataSource[] GetReportDataSources(string Report)
    {
      var results = Invoke("GetReportDataSources", new object[]
      {
        Report
      });
      return (DataSource[]) results[0];
    }


    public IAsyncResult BeginGetReportDataSources(string Report, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("GetReportDataSources", new object[]
      {
        Report
      }, callback, asyncState);
    }


    public DataSource[] EndGetReportDataSources(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (DataSource[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRep" +
                        "ortDataSourcePrompts",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("DataSourcePrompts")]
    public DataSourcePrompt[] GetReportDataSourcePrompts(string Report)
    {
      var results = Invoke("GetReportDataSourcePrompts", new object[]
      {
        Report
      });
      return (DataSourcePrompt[]) results[0];
    }


    public IAsyncResult BeginGetReportDataSourcePrompts(string Report, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("GetReportDataSourcePrompts", new object[]
      {
        Report
      }, callback, asyncState);
    }


    public DataSourcePrompt[] EndGetReportDataSourcePrompts(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (DataSourcePrompt[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
                        "ReportHistorySnapshot",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlElement("HistoryID")]
    public string CreateReportHistorySnapshot(string Report, out Warning[] Warnings)
    {
      var results = Invoke("CreateReportHistorySnapshot", new object[]
      {
        Report
      });
      Warnings = (Warning[]) results[1];
      return (string) results[0];
    }


    public IAsyncResult BeginCreateReportHistorySnapshot(string Report, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("CreateReportHistorySnapshot", new object[]
      {
        Report
      }, callback, asyncState);
    }


    public string EndCreateReportHistorySnapshot(IAsyncResult asyncResult, out Warning[] Warnings)
    {
      var results = EndInvoke(asyncResult);
      Warnings = (Warning[]) results[1];
      return (string) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRep" +
                        "ortHistoryOptions",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void SetReportHistoryOptions(string Report, bool EnableManualSnapshotCreation,
      bool KeepExecutionSnapshots,
      [XmlElement("NoSchedule", typeof (NoSchedule))] [XmlElement("ScheduleDefinition", typeof (ScheduleDefinition))] [XmlElement("ScheduleReference", typeof (ScheduleReference))] ScheduleDefinitionOrReference Item)
    {
      Invoke("SetReportHistoryOptions", new object[]
      {
        Report,
        EnableManualSnapshotCreation,
        KeepExecutionSnapshots,
        Item
      });
    }


    public IAsyncResult BeginSetReportHistoryOptions(string Report, bool EnableManualSnapshotCreation,
      bool KeepExecutionSnapshots, ScheduleDefinitionOrReference Item,
      AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("SetReportHistoryOptions", new object[]
      {
        Report,
        EnableManualSnapshotCreation,
        KeepExecutionSnapshots,
        Item
      }, callback, asyncState);
    }


    public void EndSetReportHistoryOptions(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRep" +
                        "ortHistoryOptions",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlElement("EnableManualSnapshotCreation")]
    public bool GetReportHistoryOptions(string Report, out bool KeepExecutionSnapshots,
      [XmlElement("NoSchedule", typeof (NoSchedule))] [XmlElement("ScheduleDefinition", typeof (ScheduleDefinition))] [XmlElement("ScheduleReference", typeof (ScheduleReference))] out
        ScheduleDefinitionOrReference Item)
    {
      var results = Invoke("GetReportHistoryOptions", new object[]
      {
        Report
      });
      KeepExecutionSnapshots = (bool) results[1];
      Item = (ScheduleDefinitionOrReference) results[2];
      return (bool) results[0];
    }


    public IAsyncResult BeginGetReportHistoryOptions(string Report, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("GetReportHistoryOptions", new object[]
      {
        Report
      }, callback, asyncState);
    }


    public bool EndGetReportHistoryOptions(IAsyncResult asyncResult, out bool KeepExecutionSnapshots,
      out ScheduleDefinitionOrReference Item)
    {
      var results = EndInvoke(asyncResult);
      KeepExecutionSnapshots = (bool) results[1];
      Item = (ScheduleDefinitionOrReference) results[2];
      return (bool) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRep" +
                        "ortHistoryLimit",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void SetReportHistoryLimit(string Report, bool UseSystem, int HistoryLimit)
    {
      Invoke("SetReportHistoryLimit", new object[]
      {
        Report,
        UseSystem,
        HistoryLimit
      });
    }


    public IAsyncResult BeginSetReportHistoryLimit(string Report, bool UseSystem, int HistoryLimit,
      AsyncCallback callback,
      object asyncState)
    {
      return BeginInvoke("SetReportHistoryLimit", new object[]
      {
        Report,
        UseSystem,
        HistoryLimit
      }, callback, asyncState);
    }


    public void EndSetReportHistoryLimit(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRep" +
                        "ortHistoryLimit",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlElement("HistoryLimit")]
    public int GetReportHistoryLimit(string Report, out bool IsSystem, out int SystemLimit)
    {
      var results = Invoke("GetReportHistoryLimit", new object[]
      {
        Report
      });
      IsSystem = (bool) results[1];
      SystemLimit = (int) results[2];
      return (int) results[0];
    }


    public IAsyncResult BeginGetReportHistoryLimit(string Report, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("GetReportHistoryLimit", new object[]
      {
        Report
      }, callback, asyncState);
    }


    public int EndGetReportHistoryLimit(IAsyncResult asyncResult, out bool IsSystem, out int SystemLimit)
    {
      var results = EndInvoke(asyncResult);
      IsSystem = (bool) results[1];
      SystemLimit = (int) results[2];
      return (int) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListRe" +
                        "portHistory",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("ReportHistory")]
    public ReportHistorySnapshot[] ListReportHistory(string Report)
    {
      var results = Invoke("ListReportHistory", new object[]
      {
        Report
      });
      return (ReportHistorySnapshot[]) results[0];
    }


    public IAsyncResult BeginListReportHistory(string Report, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("ListReportHistory", new object[]
      {
        Report
      }, callback, asyncState);
    }


    public ReportHistorySnapshot[] EndListReportHistory(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (ReportHistorySnapshot[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Delete" +
                        "ReportHistorySnapshot",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void DeleteReportHistorySnapshot(string Report, string HistoryID)
    {
      Invoke("DeleteReportHistorySnapshot", new object[]
      {
        Report,
        HistoryID
      });
    }


    public IAsyncResult BeginDeleteReportHistorySnapshot(string Report, string HistoryID, AsyncCallback callback,
      object asyncState)
    {
      return BeginInvoke("DeleteReportHistorySnapshot", new object[]
      {
        Report,
        HistoryID
      }, callback, asyncState);
    }


    public void EndDeleteReportHistorySnapshot(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/FindIt" +
                        "ems",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("Items")]
    public CatalogItem[] FindItems(string Folder, BooleanOperatorEnum BooleanOperator, SearchCondition[] Conditions)
    {
      var results = Invoke("FindItems", new object[]
      {
        Folder,
        BooleanOperator,
        Conditions
      });
      return (CatalogItem[]) results[0];
    }


    public IAsyncResult BeginFindItems(string Folder, BooleanOperatorEnum BooleanOperator,
      SearchCondition[] Conditions,
      AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("FindItems", new object[]
      {
        Folder,
        BooleanOperator,
        Conditions
      }, callback, asyncState);
    }


    public CatalogItem[] EndFindItems(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (CatalogItem[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
                        "Schedule",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlElement("ScheduleID")]
    public string CreateSchedule(string Name, ScheduleDefinition ScheduleDefinition)
    {
      var results = Invoke("CreateSchedule", new object[]
      {
        Name,
        ScheduleDefinition
      });
      return (string) results[0];
    }


    public IAsyncResult BeginCreateSchedule(string Name, ScheduleDefinition ScheduleDefinition,
      AsyncCallback callback,
      object asyncState)
    {
      return BeginInvoke("CreateSchedule", new object[]
      {
        Name,
        ScheduleDefinition
      }, callback, asyncState);
    }


    public string EndCreateSchedule(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (string) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Delete" +
                        "Schedule",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void DeleteSchedule(string ScheduleID)
    {
      Invoke("DeleteSchedule", new object[]
      {
        ScheduleID
      });
    }


    public IAsyncResult BeginDeleteSchedule(string ScheduleID, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("DeleteSchedule", new object[]
      {
        ScheduleID
      }, callback, asyncState);
    }


    public void EndDeleteSchedule(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetSch" +
                        "eduleProperties",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void SetScheduleProperties(string Name, string ScheduleID, ScheduleDefinition ScheduleDefinition)
    {
      Invoke("SetScheduleProperties", new object[]
      {
        Name,
        ScheduleID,
        ScheduleDefinition
      });
    }


    public IAsyncResult BeginSetScheduleProperties(string Name, string ScheduleID,
      ScheduleDefinition ScheduleDefinition,
      AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("SetScheduleProperties", new object[]
      {
        Name,
        ScheduleID,
        ScheduleDefinition
      }, callback, asyncState);
    }


    public void EndSetScheduleProperties(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetSch" +
                        "eduleProperties",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlElement("Schedule")]
    public Schedule GetScheduleProperties(string ScheduleID)
    {
      var results = Invoke("GetScheduleProperties", new object[]
      {
        ScheduleID
      });
      return (Schedule) results[0];
    }


    public IAsyncResult BeginGetScheduleProperties(string ScheduleID, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("GetScheduleProperties", new object[]
      {
        ScheduleID
      }, callback, asyncState);
    }


    public Schedule EndGetScheduleProperties(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (Schedule) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSc" +
                        "heduledReports",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("Reports")]
    public CatalogItem[] ListScheduledReports(string ScheduleID)
    {
      var results = Invoke("ListScheduledReports", new object[]
      {
        ScheduleID
      });
      return (CatalogItem[]) results[0];
    }


    public IAsyncResult BeginListScheduledReports(string ScheduleID, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("ListScheduledReports", new object[]
      {
        ScheduleID
      }, callback, asyncState);
    }


    public CatalogItem[] EndListScheduledReports(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (CatalogItem[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSc" +
                        "hedules",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("Schedules")]
    public Schedule[] ListSchedules()
    {
      var results = Invoke("ListSchedules", new object[0]);
      return (Schedule[]) results[0];
    }


    public IAsyncResult BeginListSchedules(AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("ListSchedules", new object[0], callback, asyncState);
    }


    public Schedule[] EndListSchedules(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (Schedule[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/PauseS" +
                        "chedule",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void PauseSchedule(string ScheduleID)
    {
      Invoke("PauseSchedule", new object[]
      {
        ScheduleID
      });
    }


    public IAsyncResult BeginPauseSchedule(string ScheduleID, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("PauseSchedule", new object[]
      {
        ScheduleID
      }, callback, asyncState);
    }


    public void EndPauseSchedule(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Resume" +
                        "Schedule",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void ResumeSchedule(string ScheduleID)
    {
      Invoke("ResumeSchedule", new object[]
      {
        ScheduleID
      });
    }


    public IAsyncResult BeginResumeSchedule(string ScheduleID, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("ResumeSchedule", new object[]
      {
        ScheduleID
      }, callback, asyncState);
    }


    public void EndResumeSchedule(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
                        "Subscription",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlElement("SubscriptionID")]
    public string CreateSubscription(string Report, ExtensionSettings ExtensionSettings, string Description,
      string EventType, string MatchData, ParameterValue[] Parameters)
    {
      var results = Invoke("CreateSubscription", new object[]
      {
        Report,
        ExtensionSettings,
        Description,
        EventType,
        MatchData,
        Parameters
      });
      return (string) results[0];
    }


    public IAsyncResult BeginCreateSubscription(string Report, ExtensionSettings ExtensionSettings,
      string Description,
      string EventType, string MatchData, ParameterValue[] Parameters,
      AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("CreateSubscription", new object[]
      {
        Report,
        ExtensionSettings,
        Description,
        EventType,
        MatchData,
        Parameters
      }, callback, asyncState);
    }


    public string EndCreateSubscription(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (string) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
                        "DataDrivenSubscription",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlElement("SubscriptionID")]
    public string CreateDataDrivenSubscription(string Report, ExtensionSettings ExtensionSettings,
      DataRetrievalPlan DataRetrievalPlan, string Description,
      string EventType,
      string MatchData, ParameterValueOrFieldReference[] Parameters)
    {
      var results = Invoke("CreateDataDrivenSubscription", new object[]
      {
        Report,
        ExtensionSettings,
        DataRetrievalPlan,
        Description,
        EventType,
        MatchData,
        Parameters
      });
      return (string) results[0];
    }


    public IAsyncResult BeginCreateDataDrivenSubscription(string Report, ExtensionSettings ExtensionSettings,
      DataRetrievalPlan DataRetrievalPlan, string Description,
      string EventType, string MatchData,
      ParameterValueOrFieldReference[] Parameters,
      AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("CreateDataDrivenSubscription", new object[]
      {
        Report,
        ExtensionSettings,
        DataRetrievalPlan,
        Description,
        EventType,
        MatchData,
        Parameters
      }, callback, asyncState);
    }


    public string EndCreateDataDrivenSubscription(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (string) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetSub" +
                        "scriptionProperties",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void SetSubscriptionProperties(string SubscriptionID, ExtensionSettings ExtensionSettings,
      string Description,
      string EventType, string MatchData, ParameterValue[] Parameters)
    {
      Invoke("SetSubscriptionProperties", new object[]
      {
        SubscriptionID,
        ExtensionSettings,
        Description,
        EventType,
        MatchData,
        Parameters
      });
    }


    public IAsyncResult BeginSetSubscriptionProperties(string SubscriptionID, ExtensionSettings ExtensionSettings,
      string Description, string EventType, string MatchData,
      ParameterValue[] Parameters, AsyncCallback callback,
      object asyncState)
    {
      return BeginInvoke("SetSubscriptionProperties", new object[]
      {
        SubscriptionID,
        ExtensionSettings,
        Description,
        EventType,
        MatchData,
        Parameters
      }, callback, asyncState);
    }


    public void EndSetSubscriptionProperties(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetDat" +
                        "aDrivenSubscriptionProperties",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void SetDataDrivenSubscriptionProperties(string DataDrivenSubscriptionID,
      ExtensionSettings ExtensionSettings,
      DataRetrievalPlan DataRetrievalPlan, string Description,
      string EventType, string MatchData,
      ParameterValueOrFieldReference[] Parameters)
    {
      Invoke("SetDataDrivenSubscriptionProperties", new object[]
      {
        DataDrivenSubscriptionID,
        ExtensionSettings,
        DataRetrievalPlan,
        Description,
        EventType,
        MatchData,
        Parameters
      });
    }


    public IAsyncResult BeginSetDataDrivenSubscriptionProperties(string DataDrivenSubscriptionID,
      ExtensionSettings ExtensionSettings,
      DataRetrievalPlan DataRetrievalPlan,
      string Description,
      string EventType, string MatchData,
      ParameterValueOrFieldReference[] Parameters,
      AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("SetDataDrivenSubscriptionProperties", new object[]
      {
        DataDrivenSubscriptionID,
        ExtensionSettings,
        DataRetrievalPlan,
        Description,
        EventType,
        MatchData,
        Parameters
      }, callback, asyncState);
    }


    public void EndSetDataDrivenSubscriptionProperties(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetSub" +
                        "scriptionProperties",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlElement("Owner")]
    public string GetSubscriptionProperties(string SubscriptionID, out ExtensionSettings ExtensionSettings,
      out string Description, out ActiveState Active, out string Status,
      out string EventType, out string MatchData,
      out ParameterValue[] Parameters)
    {
      var results = Invoke("GetSubscriptionProperties", new object[]
      {
        SubscriptionID
      });
      ExtensionSettings = (ExtensionSettings) results[1];
      Description = (string) results[2];
      Active = (ActiveState) results[3];
      Status = (string) results[4];
      EventType = (string) results[5];
      MatchData = (string) results[6];
      Parameters = (ParameterValue[]) results[7];
      return (string) results[0];
    }


    public IAsyncResult BeginGetSubscriptionProperties(string SubscriptionID, AsyncCallback callback,
      object asyncState)
    {
      return BeginInvoke("GetSubscriptionProperties", new object[]
      {
        SubscriptionID
      }, callback, asyncState);
    }


    public string EndGetSubscriptionProperties(IAsyncResult asyncResult, out ExtensionSettings ExtensionSettings,
      out string Description, out ActiveState Active, out string Status,
      out string EventType, out string MatchData,
      out ParameterValue[] Parameters)
    {
      var results = EndInvoke(asyncResult);
      ExtensionSettings = (ExtensionSettings) results[1];
      Description = (string) results[2];
      Active = (ActiveState) results[3];
      Status = (string) results[4];
      EventType = (string) results[5];
      MatchData = (string) results[6];
      Parameters = (ParameterValue[]) results[7];
      return (string) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetDat" +
                        "aDrivenSubscriptionProperties",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlElement("Owner")]
    public string GetDataDrivenSubscriptionProperties(string DataDrivenSubscriptionID,
      out ExtensionSettings ExtensionSettings,
      out DataRetrievalPlan DataRetrievalPlan,
      out string Description,
      out ActiveState Active, out string Status,
      out string EventType,
      out string MatchData,
      out ParameterValueOrFieldReference[] Parameters)
    {
      var results = Invoke("GetDataDrivenSubscriptionProperties", new object[]
      {
        DataDrivenSubscriptionID
      });
      ExtensionSettings = (ExtensionSettings) results[1];
      DataRetrievalPlan = (DataRetrievalPlan) results[2];
      Description = (string) results[3];
      Active = (ActiveState) results[4];
      Status = (string) results[5];
      EventType = (string) results[6];
      MatchData = (string) results[7];
      Parameters = (ParameterValueOrFieldReference[]) results[8];
      return (string) results[0];
    }


    public IAsyncResult BeginGetDataDrivenSubscriptionProperties(string DataDrivenSubscriptionID,
      AsyncCallback callback,
      object asyncState)
    {
      return BeginInvoke("GetDataDrivenSubscriptionProperties", new object[]
      {
        DataDrivenSubscriptionID
      }, callback, asyncState);
    }


    public string EndGetDataDrivenSubscriptionProperties(IAsyncResult asyncResult,
      out ExtensionSettings ExtensionSettings,
      out DataRetrievalPlan DataRetrievalPlan,
      out string Description,
      out ActiveState Active, out string Status,
      out string EventType,
      out string MatchData,
      out ParameterValueOrFieldReference[] Parameters)
    {
      var results = EndInvoke(asyncResult);
      ExtensionSettings = (ExtensionSettings) results[1];
      DataRetrievalPlan = (DataRetrievalPlan) results[2];
      Description = (string) results[3];
      Active = (ActiveState) results[4];
      Status = (string) results[5];
      EventType = (string) results[6];
      MatchData = (string) results[7];
      Parameters = (ParameterValueOrFieldReference[]) results[8];
      return (string) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Delete" +
                        "Subscription",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void DeleteSubscription(string SubscriptionID)
    {
      Invoke("DeleteSubscription", new object[]
      {
        SubscriptionID
      });
    }


    public IAsyncResult BeginDeleteSubscription(string SubscriptionID, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("DeleteSubscription", new object[]
      {
        SubscriptionID
      }, callback, asyncState);
    }


    public void EndDeleteSubscription(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Prepar" +
                        "eQuery",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlElement("DataSettings")]
    public DataSetDefinition PrepareQuery(DataSource DataSource, DataSetDefinition DataSet, out bool Changed)
    {
      var results = Invoke("PrepareQuery", new object[]
      {
        DataSource,
        DataSet
      });
      Changed = (bool) results[1];
      return (DataSetDefinition) results[0];
    }


    public IAsyncResult BeginPrepareQuery(DataSource DataSource, DataSetDefinition DataSet, AsyncCallback callback,
      object asyncState)
    {
      return BeginInvoke("PrepareQuery", new object[]
      {
        DataSource,
        DataSet
      }, callback, asyncState);
    }


    public DataSetDefinition EndPrepareQuery(IAsyncResult asyncResult, out bool Changed)
    {
      var results = EndInvoke(asyncResult);
      Changed = (bool) results[1];
      return (DataSetDefinition) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetExt" +
                        "ensionSettings",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("ExtensionParameters")]
    public ExtensionParameter[] GetExtensionSettings(string Extension)
    {
      var results = Invoke("GetExtensionSettings", new object[]
      {
        Extension
      });
      return (ExtensionParameter[]) results[0];
    }


    public IAsyncResult BeginGetExtensionSettings(string Extension, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("GetExtensionSettings", new object[]
      {
        Extension
      }, callback, asyncState);
    }


    public ExtensionParameter[] EndGetExtensionSettings(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (ExtensionParameter[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Valida" +
                        "teExtensionSettings",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("ParameterErrors")]
    public ExtensionParameter[] ValidateExtensionSettings(string Extension,
      ParameterValueOrFieldReference[] ParameterValues)
    {
      var results = Invoke("ValidateExtensionSettings", new object[]
      {
        Extension,
        ParameterValues
      });
      return (ExtensionParameter[]) results[0];
    }


    public IAsyncResult BeginValidateExtensionSettings(string Extension,
      ParameterValueOrFieldReference[] ParameterValues,
      AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("ValidateExtensionSettings", new object[]
      {
        Extension,
        ParameterValues
      }, callback, asyncState);
    }


    public ExtensionParameter[] EndValidateExtensionSettings(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (ExtensionParameter[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSu" +
                        "bscriptions",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("SubscriptionItems")]
    public Subscription[] ListSubscriptions(string Report, string Owner)
    {
      var results = Invoke("ListSubscriptions", new object[]
      {
        Report,
        Owner
      });
      return (Subscription[]) results[0];
    }


    public IAsyncResult BeginListSubscriptions(string Report, string Owner, AsyncCallback callback,
      object asyncState)
    {
      return BeginInvoke("ListSubscriptions", new object[]
      {
        Report,
        Owner
      }, callback, asyncState);
    }


    public Subscription[] EndListSubscriptions(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (Subscription[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSu" +
                        "bscriptionsUsingDataSource",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("SubscriptionItems")]
    public Subscription[] ListSubscriptionsUsingDataSource(string DataSource)
    {
      var results = Invoke("ListSubscriptionsUsingDataSource", new object[]
      {
        DataSource
      });
      return (Subscription[]) results[0];
    }


    public IAsyncResult BeginListSubscriptionsUsingDataSource(string DataSource, AsyncCallback callback,
      object asyncState)
    {
      return BeginInvoke("ListSubscriptionsUsingDataSource", new object[]
      {
        DataSource
      }, callback, asyncState);
    }


    public Subscription[] EndListSubscriptionsUsingDataSource(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (Subscription[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListEx" +
                        "tensions",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("Extensions")]
    public Extension[] ListExtensions(ExtensionTypeEnum ExtensionType)
    {
      var results = Invoke("ListExtensions", new object[]
      {
        ExtensionType
      });
      return (Extension[]) results[0];
    }


    public IAsyncResult BeginListExtensions(ExtensionTypeEnum ExtensionType, AsyncCallback callback,
      object asyncState)
    {
      return BeginInvoke("ListExtensions", new object[]
      {
        ExtensionType
      }, callback, asyncState);
    }


    public Extension[] EndListExtensions(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (Extension[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListEv" +
                        "ents",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("Events")]
    public Event[] ListEvents()
    {
      var results = Invoke("ListEvents", new object[0]);
      return (Event[]) results[0];
    }


    public IAsyncResult BeginListEvents(AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("ListEvents", new object[0], callback, asyncState);
    }


    public Event[] EndListEvents(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (Event[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/FireEv" +
                        "ent",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void FireEvent(string EventType, string EventData)
    {
      Invoke("FireEvent", new object[]
      {
        EventType,
        EventData
      });
    }


    public IAsyncResult BeginFireEvent(string EventType, string EventData, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("FireEvent", new object[]
      {
        EventType,
        EventData
      }, callback, asyncState);
    }


    public void EndFireEvent(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSy" +
                        "stemTasks",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("Tasks")]
    public Task[] ListSystemTasks()
    {
      var results = Invoke("ListSystemTasks", new object[0]);
      return (Task[]) results[0];
    }


    public IAsyncResult BeginListSystemTasks(AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("ListSystemTasks", new object[0], callback, asyncState);
    }


    public Task[] EndListSystemTasks(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (Task[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListTa" +
                        "sks",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("Tasks")]
    public Task[] ListTasks()
    {
      var results = Invoke("ListTasks", new object[0]);
      return (Task[]) results[0];
    }


    public IAsyncResult BeginListTasks(AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("ListTasks", new object[0], callback, asyncState);
    }


    public Task[] EndListTasks(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (Task[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSy" +
                        "stemRoles",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("Roles")]
    public Role[] ListSystemRoles()
    {
      var results = Invoke("ListSystemRoles", new object[0]);
      return (Role[]) results[0];
    }


    public IAsyncResult BeginListSystemRoles(AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("ListSystemRoles", new object[0], callback, asyncState);
    }


    public Role[] EndListSystemRoles(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (Role[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListRo" +
                        "les",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("Roles")]
    public Role[] ListRoles()
    {
      var results = Invoke("ListRoles", new object[0]);
      return (Role[]) results[0];
    }


    public IAsyncResult BeginListRoles(AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("ListRoles", new object[0], callback, asyncState);
    }


    public Role[] EndListRoles(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (Role[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
                        "Role",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void CreateRole(string Name, string Description, Task[] Tasks)
    {
      Invoke("CreateRole", new object[]
      {
        Name,
        Description,
        Tasks
      });
    }


    public IAsyncResult BeginCreateRole(string Name, string Description, Task[] Tasks, AsyncCallback callback,
      object asyncState)
    {
      return BeginInvoke("CreateRole", new object[]
      {
        Name,
        Description,
        Tasks
      }, callback, asyncState);
    }


    public void EndCreateRole(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Delete" +
                        "Role",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void DeleteRole(string Name)
    {
      Invoke("DeleteRole", new object[]
      {
        Name
      });
    }


    public IAsyncResult BeginDeleteRole(string Name, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("DeleteRole", new object[]
      {
        Name
      }, callback, asyncState);
    }


    public void EndDeleteRole(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRol" +
                        "eProperties",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("Tasks")]
    public Task[] GetRoleProperties(string Name, out string Description)
    {
      var results = Invoke("GetRoleProperties", new object[]
      {
        Name
      });
      Description = (string) results[1];
      return (Task[]) results[0];
    }


    public IAsyncResult BeginGetRoleProperties(string Name, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("GetRoleProperties", new object[]
      {
        Name
      }, callback, asyncState);
    }


    public Task[] EndGetRoleProperties(IAsyncResult asyncResult, out string Description)
    {
      var results = EndInvoke(asyncResult);
      Description = (string) results[1];
      return (Task[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRol" +
                        "eProperties",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void SetRoleProperties(string Name, string Description, Task[] Tasks)
    {
      Invoke("SetRoleProperties", new object[]
      {
        Name,
        Description,
        Tasks
      });
    }


    public IAsyncResult BeginSetRoleProperties(string Name, string Description, Task[] Tasks, AsyncCallback callback,
      object asyncState)
    {
      return BeginInvoke("SetRoleProperties", new object[]
      {
        Name,
        Description,
        Tasks
      }, callback, asyncState);
    }


    public void EndSetRoleProperties(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetSys" +
                        "temPolicies",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("Policies")]
    public Policy[] GetSystemPolicies()
    {
      var results = Invoke("GetSystemPolicies", new object[0]);
      return (Policy[]) results[0];
    }


    public IAsyncResult BeginGetSystemPolicies(AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("GetSystemPolicies", new object[0], callback, asyncState);
    }


    public Policy[] EndGetSystemPolicies(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (Policy[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetSys" +
                        "temPolicies",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void SetSystemPolicies(Policy[] Policies)
    {
      Invoke("SetSystemPolicies", new object[]
      {
        Policies
      });
    }


    public IAsyncResult BeginSetSystemPolicies(Policy[] Policies, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("SetSystemPolicies", new object[]
      {
        Policies
      }, callback, asyncState);
    }


    public void EndSetSystemPolicies(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetPol" +
                        "icies",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("Policies")]
    public Policy[] GetPolicies(string Item, out bool InheritParent)
    {
      var results = Invoke("GetPolicies", new object[]
      {
        Item
      });
      InheritParent = (bool) results[1];
      return (Policy[]) results[0];
    }


    public IAsyncResult BeginGetPolicies(string Item, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("GetPolicies", new object[]
      {
        Item
      }, callback, asyncState);
    }


    public Policy[] EndGetPolicies(IAsyncResult asyncResult, out bool InheritParent)
    {
      var results = EndInvoke(asyncResult);
      InheritParent = (bool) results[1];
      return (Policy[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetPol" +
                        "icies",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void SetPolicies(string Item, Policy[] Policies)
    {
      Invoke("SetPolicies", new object[]
      {
        Item,
        Policies
      });
    }


    public IAsyncResult BeginSetPolicies(string Item, Policy[] Policies, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("SetPolicies", new object[]
      {
        Item,
        Policies
      }, callback, asyncState);
    }


    public void EndSetPolicies(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapHeader("BatchHeaderValue")]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Inheri" +
                        "tParentSecurity",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void InheritParentSecurity(string Item)
    {
      Invoke("InheritParentSecurity", new object[]
      {
        Item
      });
    }


    public IAsyncResult BeginInheritParentSecurity(string Item, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("InheritParentSecurity", new object[]
      {
        Item
      }, callback, asyncState);
    }


    public void EndInheritParentSecurity(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetSys" +
                        "temPermissions",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("Permissions")]
    [return: XmlArrayItem("Operation")]
    public string[] GetSystemPermissions()
    {
      var results = Invoke("GetSystemPermissions", new object[0]);
      return (string[]) results[0];
    }


    public IAsyncResult BeginGetSystemPermissions(AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("GetSystemPermissions", new object[0], callback, asyncState);
    }


    public string[] EndGetSystemPermissions(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (string[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetPer" +
                        "missions",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    [return: XmlArray("Permissions")]
    [return: XmlArrayItem("Operation")]
    public string[] GetPermissions(string Item)
    {
      var results = Invoke("GetPermissions", new object[]
      {
        Item
      });
      return (string[]) results[0];
    }


    public IAsyncResult BeginGetPermissions(string Item, AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("GetPermissions", new object[]
      {
        Item
      }, callback, asyncState);
    }


    public string[] EndGetPermissions(IAsyncResult asyncResult)
    {
      var results = EndInvoke(asyncResult);
      return (string[]) results[0];
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/LogonU" +
                        "ser",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void LogonUser(string userName, string password, string authority)
    {
      Invoke("LogonUser", new object[]
      {
        userName,
        password,
        authority
      });
    }


    public IAsyncResult BeginLogonUser(string userName, string password, string authority, AsyncCallback callback,
      object asyncState)
    {
      return BeginInvoke("LogonUser", new object[]
      {
        userName,
        password,
        authority
      }, callback, asyncState);
    }


    public void EndLogonUser(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }


    [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
    [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Logoff" +
                        "",
      RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
      Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void Logoff()
    {
      Invoke("Logoff", new object[0]);
    }


    public IAsyncResult BeginLogoff(AsyncCallback callback, object asyncState)
    {
      return BeginInvoke("Logoff", new object[0], callback, asyncState);
    }


    public void EndLogoff(IAsyncResult asyncResult)
    {
      EndInvoke(asyncResult);
    }
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  [XmlRoot(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", IsNullable = false)
  ]
  public class ServerInfoHeader : SoapHeader
  {
    public string ReportServerEdition;
    public string ReportServerVersionNumber;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class Policy
  {
    public string GroupUserName;


    public Role[] Roles;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class Role
  {
    public string Description;
    public string Name;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class Task
  {
    public string Description;
    public string Name;
    public string TaskID;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class Event
  {
    public string Type;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class Extension
  {
    public ExtensionTypeEnum ExtensionType;


    public string LocalizedName;
    public string Name;


    public bool Visible;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public enum ExtensionTypeEnum
  {
    Delivery,


    Render,


    Data,


    All
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class Subscription
  {
    public ActiveState Active;
    public ExtensionSettings DeliverySettings;


    public string Description;
    public string EventType;


    public bool IsDataDriven;


    public DateTime LastExecuted;


    [XmlIgnore] public bool LastExecutedSpecified;


    public string ModifiedBy;


    public DateTime ModifiedDate;
    public string Owner;


    public string Path;
    public string Report;
    public string Status;
    public string SubscriptionID;
    public string VirtualPath;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class ExtensionSettings
  {
    public string Extension;


    [XmlArrayItem(typeof (ParameterValue))] [XmlArrayItem(typeof (ParameterFieldReference))] public
      ParameterValueOrFieldReference[] ParameterValues;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class ParameterValue : ParameterValueOrFieldReference
  {
    public string Name { get; set; }

    public string Value { get; set; }

    public string Label { get; set; }
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  [XmlInclude(typeof (ParameterFieldReference))]
  [XmlInclude(typeof (ParameterValue))]
  public class ParameterValueOrFieldReference
  {
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class ParameterFieldReference : ParameterValueOrFieldReference
  {
    public string FieldAlias;
    public string ParameterName;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class ActiveState
  {
    public bool DeliveryExtensionRemoved;


    [XmlIgnore] public bool DeliveryExtensionRemovedSpecified;


    public bool InvalidParameterValue;


    [XmlIgnore] public bool InvalidParameterValueSpecified;
    public bool MissingParameterValue;


    [XmlIgnore] public bool MissingParameterValueSpecified;
    public bool SharedDataSourceRemoved;


    [XmlIgnore] public bool SharedDataSourceRemovedSpecified;


    public bool UnknownReportParameter;


    [XmlIgnore] public bool UnknownReportParameterSpecified;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class ExtensionParameter
  {
    public string DisplayName;


    public bool Encrypted;
    public string Error;


    public bool IsPassword;
    public string Name;
    public bool ReadOnly;
    public bool Required;


    [XmlIgnore] public bool RequiredSpecified;


    [XmlArrayItem("Value")] public ValidValue[] ValidValues;
    public string Value;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class ValidValue
  {
    public string Label;


    public string Value;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class QueryDefinition
  {
    public string CommandText;
    public string CommandType;


    public int Timeout;


    [XmlIgnore] public bool TimeoutSpecified;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class Field
  {
    public string Alias;


    public string Name;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class DataSetDefinition
  {
    public SensitivityEnum AccentSensitivity;


    [XmlIgnore] public bool AccentSensitivitySpecified;
    public SensitivityEnum CaseSensitivity;


    [XmlIgnore] public bool CaseSensitivitySpecified;


    public string Collation;
    public Field[] Fields;


    public SensitivityEnum KanatypeSensitivity;


    [XmlIgnore] public bool KanatypeSensitivitySpecified;
    public string Name;
    public QueryDefinition Query;


    public SensitivityEnum WidthSensitivity;


    [XmlIgnore] public bool WidthSensitivitySpecified;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public enum SensitivityEnum
  {
    True,


    False,


    Auto
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class DataRetrievalPlan
  {
    public DataSetDefinition DataSet;
    [XmlElement("InvalidDataSourceReference", typeof (InvalidDataSourceReference))] [XmlElement("DataSourceReference", typeof (DataSourceReference))] [XmlElement("DataSourceDefinition", typeof (DataSourceDefinition))] public DataSourceDefinitionOrReference Item;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class InvalidDataSourceReference : DataSourceDefinitionOrReference
  {
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  [XmlInclude(typeof (InvalidDataSourceReference))]
  [XmlInclude(typeof (DataSourceReference))]
  [XmlInclude(typeof (DataSourceDefinition))]
  public class DataSourceDefinitionOrReference
  {
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class DataSourceReference : DataSourceDefinitionOrReference
  {
    public string Reference;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class DataSourceDefinition : DataSourceDefinitionOrReference
  {
    public string ConnectString;


    public CredentialRetrievalEnum CredentialRetrieval;
    public bool Enabled;


    [XmlIgnore] public bool EnabledSpecified;
    public string Extension;


    public bool ImpersonateUser;


    [XmlIgnore] public bool ImpersonateUserSpecified;
    public string Password;


    public string Prompt;


    public string UserName;
    public bool WindowsCredentials;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public enum CredentialRetrievalEnum
  {
    Prompt,


    Store,


    Integrated,


    None
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class Schedule
  {
    public string Creator;
    public ScheduleDefinition Definition;


    public string Description;


    public DateTime LastRunTime;


    [XmlIgnore] public bool LastRunTimeSpecified;
    public string Name;
    public DateTime NextRunTime;


    [XmlIgnore] public bool NextRunTimeSpecified;


    public bool ReferencesPresent;
    public string ScheduleID;


    public ScheduleStateEnum State;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class ScheduleDefinition : ScheduleDefinitionOrReference
  {
    public DateTime EndDate;


    [XmlIgnore] public bool EndDateSpecified;


    [XmlElement("MinuteRecurrence", typeof (MinuteRecurrence))] [XmlElement("MonthlyRecurrence", typeof (MonthlyRecurrence))] [XmlElement("WeeklyRecurrence", typeof (WeeklyRecurrence))] [XmlElement("MonthlyDOWRecurrence", typeof (MonthlyDOWRecurrence))] [XmlElement("DailyRecurrence", typeof (DailyRecurrence))] public RecurrencePattern Item;
    public DateTime StartDateTime;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class MinuteRecurrence : RecurrencePattern
  {
    public int MinutesInterval;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  [XmlInclude(typeof (MinuteRecurrence))]
  [XmlInclude(typeof (WeeklyRecurrence))]
  [XmlInclude(typeof (MonthlyDOWRecurrence))]
  [XmlInclude(typeof (DailyRecurrence))]
  [XmlInclude(typeof (MonthlyRecurrence))]
  public class RecurrencePattern
  {
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class WeeklyRecurrence : RecurrencePattern
  {
    public DaysOfWeekSelector DaysOfWeek;
    public int WeeksInterval;


    [XmlIgnore] public bool WeeksIntervalSpecified;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class DaysOfWeekSelector
  {
    public bool Friday;
    public bool Monday;
    public bool Saturday;
    public bool Sunday;
    public bool Thursday;


    public bool Tuesday;


    public bool Wednesday;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class MonthlyDOWRecurrence : RecurrencePattern
  {
    public DaysOfWeekSelector DaysOfWeek;


    public MonthsOfYearSelector MonthsOfYear;
    public WeekNumberEnum WhichWeek;


    [XmlIgnore] public bool WhichWeekSpecified;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public enum WeekNumberEnum
  {
    FirstWeek,


    SecondWeek,


    ThirdWeek,


    FourthWeek,


    LastWeek
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class MonthsOfYearSelector
  {
    public bool April;
    public bool August;
    public bool December;
    public bool February;
    public bool January;
    public bool July;
    public bool June;


    public bool March;


    public bool May;


    public bool November;
    public bool October;
    public bool September;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class DailyRecurrence : RecurrencePattern
  {
    public int DaysInterval;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class MonthlyRecurrence : RecurrencePattern
  {
    public string Days;


    public MonthsOfYearSelector MonthsOfYear;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  [XmlInclude(typeof (ScheduleReference))]
  [XmlInclude(typeof (ScheduleDefinition))]
  [XmlInclude(typeof (NoSchedule))]
  public class ScheduleDefinitionOrReference
  {
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class ScheduleReference : ScheduleDefinitionOrReference
  {
    public ScheduleDefinition Definition;
    public string ScheduleID;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class NoSchedule : ScheduleDefinitionOrReference
  {
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public enum ScheduleStateEnum
  {
    Ready,


    Running,


    Paused,


    Expired,


    Failing
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class ReportHistorySnapshot
  {
    public DateTime CreationDate;
    public string HistoryID;


    public int Size;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class DataSourcePrompt
  {
    public string DataSourceID;
    public string Name;


    public string Prompt;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class DataSource
  {
    [XmlElement("InvalidDataSourceReference", typeof (InvalidDataSourceReference))] [XmlElement("DataSourceReference", typeof (DataSourceReference))] [XmlElement("DataSourceDefinition", typeof (DataSourceDefinition))] public DataSourceDefinitionOrReference Item;
    public string Name;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class Job
  {
    public JobActionEnum Action;
    public string Description;
    public string JobID;
    public string Machine;


    public string Name;


    public string Path;


    public DateTime StartDateTime;


    public JobStatusEnum Status;
    public JobTypeEnum Type;
    public string User;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public enum JobActionEnum
  {
    Render,


    SnapshotCreation,


    ReportHistoryCreation
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public enum JobTypeEnum
  {
    User,


    System
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public enum JobStatusEnum
  {
    New,


    Running,


    CancelRequested
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  [XmlInclude(typeof (ScheduleExpiration))]
  [XmlInclude(typeof (TimeExpiration))]
  public class ExpirationDefinition
  {
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class ScheduleExpiration : ExpirationDefinition
  {
    [XmlElement("ScheduleReference", typeof (ScheduleReference))] [XmlElement("ScheduleDefinition", typeof (ScheduleDefinition))] public ScheduleDefinitionOrReference Item;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class TimeExpiration : ExpirationDefinition
  {
    public int Minutes;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class ReportParameter
  {
    public bool AllowBlank;


    [XmlIgnore] public bool AllowBlankSpecified;
    [XmlArrayItem("Value")] public string[] DefaultValues;
    public bool DefaultValuesQueryBased;


    [XmlIgnore] public bool DefaultValuesQueryBasedSpecified;
    [XmlArrayItem("Dependency")] public string[] Dependencies;
    public string ErrorMessage;


    public bool MultiValue;


    [XmlIgnore] public bool MultiValueSpecified;
    public string Name;
    public bool Nullable;


    [XmlIgnore] public bool NullableSpecified;


    public string Prompt;


    public bool PromptUser;


    [XmlIgnore] public bool PromptUserSpecified;
    public bool QueryParameter;


    [XmlIgnore] public bool QueryParameterSpecified;


    public ParameterStateEnum State;


    [XmlIgnore] public bool StateSpecified;
    public ParameterTypeEnum Type;


    [XmlIgnore] public bool TypeSpecified;
    public ValidValue[] ValidValues;
    public bool ValidValuesQueryBased;


    [XmlIgnore] public bool ValidValuesQueryBasedSpecified;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public enum ParameterTypeEnum
  {
    Boolean,


    DateTime,


    Integer,


    Float,


    String
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public enum ParameterStateEnum
  {
    HasValidValue,


    MissingValidValue,


    HasOutstandingDependencies,


    DynamicValuesUnavailable
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class DataSourceCredentials
  {
    public string DataSourceName;


    public string Password;
    public string UserName;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class Warning
  {
    public string Code;
    public string Message;


    public string ObjectName;


    public string ObjectType;
    public string Severity;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class CatalogItem
  {
    public string CreatedBy;
    public DateTime CreationDate;


    [XmlIgnore] public bool CreationDateSpecified;
    public string Description;
    public DateTime ExecutionDate;


    [XmlIgnore] public bool ExecutionDateSpecified;


    public bool Hidden;


    [XmlIgnore] public bool HiddenSpecified;
    public string ID;
    public string MimeType;
    public string ModifiedBy;


    public DateTime ModifiedDate;


    [XmlIgnore] public bool ModifiedDateSpecified;
    public string Name;


    public string Path;
    public int Size;


    [XmlIgnore] public bool SizeSpecified;
    public ItemTypeEnum Type;
    public string VirtualPath;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public enum ItemTypeEnum
  {
    Unknown,


    Folder,


    Report,


    Resource,


    LinkedReport,


    DataSource
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  [XmlInclude(typeof (SearchCondition))]
  public class Property
  {
    public string Name;


    public string Value;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public class SearchCondition : Property
  {
    public ConditionEnum Condition;


    [XmlIgnore] public bool ConditionSpecified;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public enum ConditionEnum
  {
    Contains,


    Equals
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  [XmlRoot(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", IsNullable = false)
  ]
  public class BatchHeader : SoapHeader
  {
    public string BatchID;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  [XmlRoot(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", IsNullable = false)
  ]
  public class SessionHeader : SoapHeader
  {
    public string ExecutionDateTime;


    public string ExpirationDateTime;
    public bool IsNewExecution;
    public string SessionId;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  [XmlRoot(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", IsNullable = false)
  ]
  public class ItemNamespaceHeader : SoapHeader
  {
    public ItemNamespaceEnum ItemNamespace;
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public enum ItemNamespaceEnum
  {
    PathBased,


    GUIDBased
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public enum ExecutionSettingEnum
  {
    Live,


    Snapshot
  }


  [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
  public enum BooleanOperatorEnum
  {
    And,


    Or
  }
}